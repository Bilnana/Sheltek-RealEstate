<?php
/**
 * Created by PhpStorm.
 * User: stefan
 * Date: 13.12.17.
 * Time: 09.41
 */

namespace Drupal\reuse_search\Form;


use Drupal\Core\Form\FormBase;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;


class ReuseForm extends FormBase
{
    public function getFormId()
    {
        return 'reuse_search_form';
    }

    public function buildForm(array $form, FormStateInterface $form_state)
    {


        $form['filters'] = [
            '#type' => 'fieldset',
            '#title' => t('filters'),
            '#collapsible' => true,
            '#attributes' => array('class' => array('inline')),
        ];

        //  Bedroom

        $options = [
            0 => 'No. of Bedroom',
            1 => '1 room',
            2 => '2 room',
            3 => '3 room',
            4 => '4 room',
            5 => '5 room',
            6 => 'more then 5'
        ];

        $form['filters']['sort'] = [
            '#type' => 'select',
            '#options' => $options,
            '#default_value' => isset($_GET['sort']) ? $_GET['sort'] : '',
        ];

        //Bathroom

        $options = [
            0 => 'No. of Bathroom',
            1 => '1 bath',
            2 => '2 bath',
            3 => '3 bath',
            4 => '4 bath',
            5 => '5 bath',
            6 => 'more then 5'
        ];

        $form['filters']['bathsort'] = [
            '#type' => 'select',
            '#options' => $options,
            '#default_value' => isset($_GET['bathsort']) ? $_GET['bathsort'] : '',
        ];


        //Min and max

        $form['filters']['min'] = array(
            '#type' => 'number',
            '#placeholder' => t('Min area (sqft)'),
            '#min' => 0,
            '#max' => 1000,
            '#default_value' => isset($_GET['min']) ? $_GET['min'] : '',
        );


        $form['filters']['max'] = array(
            '#type' => 'number',
            '#placeholder' => t('Max area (sqft)'),
            '#min' => 0,
            '#max' => 1000,
            '#default_value' => isset($_GET['max']) ? $_GET['max'] : '',
        );



        $options = [
            0 => 'Location',
            'Beograd' => [
                1 => 'Dorcol',
                2 => 'Banjica',
                3 => 'Konjarnik',
            ],
            'Novi Sad' => [
                4 => 'Liman',
                5 => 'Detelinara',
                6 => 'Grbavica'
            ],

        ];


        $form['filters']['location'] = [
            '#type' => 'select',
            '#options' => $options,
            '#default_value' => isset($_GET['location']) ? $_GET['location'] : '',
        ];

        //Price range

        $form ['filters']['min_price'] = array(
            '#type' => 'number',
            '#placeholder' => t('Min'),
            '#min' => 0,
            '#max' => 100000,
            '#default_value' => isset( $_GET[ 'min_price' ] ) ? $_GET[ 'min_price' ] : '',
        );

        $form ['filters']['max_price'] = array(
            '#type' => 'number',
            '#placeholder' => t('Max'),
            '#min' => 0,
            '#max' => 100000,
            '#default_value' => isset( $_GET[ 'max_price' ] ) ? $_GET[ 'max_price' ] : '',
        );


        $form['filters']['actions']['#type'] = 'actions';
        $form['filters']['actions']['submit'] = [
            '#type' => 'submit',
            '#value' => $this->t('Search'),
        ];




        return $form;

    }


    public function validateForm(array &$form, FormStateInterface $form_state)
    {
        parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
    }



    public function submitForm(array &$form, FormStateInterface $form_state)
    {

        $location = $form_state->getValue('location');
        $sort = $form_state->getValue('sort');
        $bathsort = $form_state->getValue('bathsort');
        $min = $form_state->getValue('min');
        $max = $form_state->getValue('max');
        $max_price = $form_state->getValue('max_price');
        $min_price = $form_state->getValue('min_price');


        $option = [
            'query' =>  [
                'location' => $location,
                'sort' => $sort,
                'bathsort' => $bathsort,
                'min' => $min,
                'max' => $max,
                'min_price' => $min_price,
                'max_price' => $max_price,

            ],
        ];
        $url = Url::fromUri('internal:/search-page', $option);
        $form_state->setRedirectUrl($url);

    }
}